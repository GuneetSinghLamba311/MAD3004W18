{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red255\green255\blue255;\red0\green0\blue0;
\red63\green110\blue116;\red0\green116\blue0;\red92\green38\blue153;\red28\green0\blue207;\red46\green13\blue110;
\red196\green26\blue22;\red38\green71\blue75;}
{\*\expandedcolortbl;;\csgenericrgb\c66500\c5200\c56900;\csgray\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c18100\c5200\c43100;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c14900\c27800\c29400;}
\margl1440\margr1440\vieww16360\viewh12200\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\

\fs72 // Class Activity Day 5 Classes.\
\
1. Create payroll class:\
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f1\fs22 \cf2 \cb3 class\cf4  Payroll: \cf5 PermanentEmployee\cf4  \{ \cf6 // Inheriting class
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf2 var\cf4  finalpay: \cf7 Double\cf4 ? \cf6 // for storing Pay
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf2 var\cf4  weeks:\cf7 Int\cf4 ? \cf6 // For storing weeks
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf2 var\cf4  PaYObjc = \cf5 PermanentEmployee\cf4 ()
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf6 /*
\f0\fs24 \cf0 \

\f1\fs22 \cf6     var netpay: Double \{
\f0\fs24 \cf0 \

\f1\fs22 \cf6         get\{
\f0\fs24 \cf0 \

\f1\fs22 \cf6             var vw = self.vacationWeeks!
\f0\fs24 \cf0 \

\f1\fs22 \cf6             return self.basicPay!-100
\f0\fs24 \cf0 \

\f1\fs22 \cf6             \}
\f0\fs24 \cf0 \

\f1\fs22 \cf6         else \{
\f0\fs24 \cf0 \

\f1\fs22 \cf6         return self.basicPay!
\f0\fs24 \cf0 \

\f1\fs22 \cf6         \}
\f0\fs24 \cf0 \

\f1\fs22 \cf6     \}
\f0\fs24 \cf0 \

\f1\fs22 \cf6 */
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf2 override\cf4  \cf2 init\cf4 (EmpID: \cf7 Int\cf4 , Name: \cf7 String\cf4 , Pay: \cf7 Double\cf4 , Weeks: \cf7 Int\cf4 ) \{
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \cf2 super\cf4 .\cf2 init\cf4 (EmpID: EmpID, Name: Name, Pay: Pay, Weeks: Weeks)
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \cf2 self\cf4 .\cf5 finalpay\cf4  = Pay
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \cf2 self\cf4 .\cf5 weeks\cf4  = Weeks
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \cf2 if\cf4  \cf5 weeks\cf4 ! > \cf8 5\cf4  \{
\f0\fs24 \cf0 \

\f1\fs22 \cf4             
\f0\fs24 \cf0 \

\f1\fs22 \cf4             \cf5 finalpay\cf4  = \cf5 finalpay\cf4 ! - \cf8 100
\f0\fs24 \cf0 \

\f1\fs22 \cf4             \cf9 print\cf4 (\cf10 "Basic pay is deducted by 100 \cf4 \\\cf10 (\cf5 finalpay\cf4 !\cf10 )"\cf4 )
\f0\fs24 \cf0 \

\f1\fs22 \cf4             
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \}
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \cf2 else\cf4  \{
\f0\fs24 \cf0 \

\f1\fs22 \cf4             
\f0\fs24 \cf0 \

\f1\fs22 \cf4             \cf9 print\cf4 (\cf10 "No change in pay \cf4 \\\cf10 (\cf5 finalpay\cf4 !\cf10 )"\cf4 )
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \}
\f0\fs24 \cf0 \

\f1\fs22 \cf4         
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \}
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4     
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf6 // DisplayFunction FOR Payroll Inherited class.
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \cf2 override\cf4  \cf2 func\cf4  display() \{
\f0\fs24 \cf0 \

\f1\fs22 \cf4         \cf2 super\cf4 .\cf11 display\cf4 ()
\f0\fs24 \cf0 \

\f1\fs22 \cf4         
\f0\fs24 \cf0 \

\f1\fs22 \cf4        \}
\f0\fs24 \cf0 \

\f1\fs22 \cf4     \}
\f0\fs24 \cf0 \
\

\f1\fs22 \cf2 var\cf4  PayrollObjC = \cf5 Payroll\cf4 (EmpID: \cf8 89\cf4 , Name: \cf10 "JOHN"\cf4 , Pay: \cf8 6000\cf4 , Weeks: \cf8 6\cf4 )
\f0\fs24 \cf0 \

\f1\fs22 \cf5 PayrollObjC\cf4 .\cf11 display\cf4 ()
\f0\fs72 \cf0 \cb1 \
Why most languages don\'92t use multiple languages.\
\
Multiple Inheritance is when there are two base classes and from them one class is derived. It basically inherits the  properties of both class but th e problem occurs when you have to access the value of some variable from base class. If you use super for accessing a variable from base class A but also base class b have same name variable then it will cause a problem for super keyword to access which variable so in such situation multiple\
 inheritance is not used in most of the languages but there are alternatives to do that like in java we have interfaces and in swift we have protocols to do multiple inheritance.\
\
\
\
\
}